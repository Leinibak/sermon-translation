services:
  db:
    image: postgres:15-alpine
    container_name: webboard_db_prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - webboard_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: webboard_backend_prod
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      # Django 환경변수 직접 전달
      - DJANGO_ENV=prod
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-89.168.102.116,localhost}
      # 데이터베이스
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      # CORS
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://89.168.102.116}
    depends_on:
      db:
        condition: service_healthy
    restart: always
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    
    networks:
      - webboard_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=/api/board/posts/
    container_name: webboard_frontend_prod
    expose:
      - "80"
    depends_on:
      - backend
    restart: always
    networks:
      - webboard_network

  nginx:
    image: nginx:alpine
    container_name: webboard_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - backend
      - frontend
    restart: always
    networks:
      - webboard_network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  webboard_network:
    driver: bridge
