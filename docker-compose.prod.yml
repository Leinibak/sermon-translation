# ============================================
# docker-compose.prod.yml
# 운영용 (production)
# ============================================
version: '3.9'

services:
  db:
    image: postgres:15-alpine
    container_name: webboard_db_prod
    env_file:
      - ./backend/.env.production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - webboard_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: webboard_backend_prod
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      - "8000"
    env_file:
      - ./.env.production
      - ./backend/.env.production
    depends_on:
      db:
        condition: service_healthy
    restart: always
    networks:
      - webboard_network
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
    container_name: webboard_frontend_prod
    expose:
      - "80"
    env_file:
      - ./.env.production
      - ./frontend/.env.production
    depends_on:
      - backend
    volumes:
      - ./frontend/build:/usr/share/nginx/html
    restart: always
    networks:
      - webboard_network

  nginx:
    image: nginx:alpine
    container_name: webboard_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - backend
      - frontend
    restart: always
    networks:
      - webboard_network

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  webboard_network:
    driver: bridge
